import time
from functools import wraps
import random
def timeit(method):#определение функции принимающей другую функцию в качестве аргумента
    @wraps(method)#декоратор, который обеспечивает сохранение метаданных функции
    def timed(*args, **kw):#определение новой функции которая принимает произвольное количество позиционных
        ts = time.monotonic()#получение текущего значения монотонного времени для начала измерения времени выполнения
        result = method(*args, **kw)#вызов функции с переданными аргументами и сохранение ее результата
        te = time.monotonic()#получение текущего значения монотонного времени для завершения измерения времени выполнения
        ms = (te - ts) * 1000#вычисление времени выполнения в миллисекундах путем вычитания времени начала из времени завершения и умножения на 1000
        return result, ms#возврат результата выполнения функции
    return timed#возврат новой функции timed
@timeit
def elements(arr):#определена функция, которая выполняет сортировку пузырьком для заданного списка
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
sizes = [10, 100, 1000, 10000]#определен список, содержащий несколько значений, которые представляют размеры списков
print("| № | Элементов | Отсортированный список | Время выполнения |")#выводится таблица с результатами сортировки для каждого размера списка
for i, size in enumerate(sizes, 1):
    arr = [random.randint(0, 100) for _ in range(size)]  # Создаем список в момент вызова функции
    result, timing = elements(arr)
    print(f"| {i} | {size} | {result} | {timing:.2f} |")